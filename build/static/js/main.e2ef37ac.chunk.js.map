{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","getMessaging","App","_useState","useState","_useState2","_slicedToArray","show","setShow","_useState3","title","body","_useState4","notification","setNotification","_useState5","_useState6","token","setToken","_useState7","_useState8","isTokenFound","setTokenFound","getToken","vapidKey","then","currentToken","console","log","catch","err","fetchToken","Promise","resolve","onMessage","payload","_jsxs","className","children","Toast","onClose","delay","autohide","animation","style","position","top","right","minWidth","Header","_jsx","src","alt","Body","CopyToClipboard","text","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"uQAeMA,EAAcC,YAVG,CACrBC,OAAQ,0CACRC,WAAY,6BACZC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIXC,EAAYC,YAAaV,G,+BCqDhBW,MA9Df,WAEE,IAAAC,EAAwBC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAhCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,EAAwCL,mBAAS,CAACM,MAAO,GAAIC,KAAM,KAAIC,EAAAN,YAAAG,EAAA,GAAhEI,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,EAA0BX,mBAAS,MAAKY,EAAAV,YAAAS,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAAsCf,oBAAS,GAAMgB,EAAAd,YAAAa,EAAA,GAA9CE,EAAYD,EAAA,GAcnB,ODRwB,SAACE,EAAeJ,GACjCK,YAASvB,EAAW,CAACwB,SAAU,4FAA4FC,MAAK,SAACC,GAClIA,GACFC,QAAQC,IAAI,6BAA8BF,GAC1CJ,GAAc,GACdJ,EAASQ,KAITC,QAAQC,IAAI,wEACZN,GAAc,GAGlB,IAAGO,OAAM,SAACC,GACRH,QAAQC,IAAI,6CAA8CE,EAE5D,GACF,CCtBEC,CADkCX,EAAA,GACRF,GDyB1B,IAAIc,SAAQ,SAACC,GACXC,YAAUlC,GAAW,SAACmC,GACpBF,EAAQE,EACV,GACJ,IC3BsBV,MAAK,SAAAU,GACvBrB,EAAgB,CAACJ,MAAOyB,EAAQtB,aAAaH,MAAOC,KAAMwB,EAAQtB,aAAaF,OAC/EH,GAAQ,GACRmB,QAAQC,IAAIO,EACd,IAAGN,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,WAAYE,EAAI,IAQ1CM,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAChBF,eAACG,IAAK,CAACC,QAAS,kBAAMhC,GAAQ,EAAM,EAAED,KAAMA,EAAMkC,MAAO,IAAMC,UAAQ,EAACC,WAAS,EAACC,MAAO,CACvFC,SAAU,WACVC,IAAK,GACLC,MAAO,GACPC,SAAU,KACVV,SAAA,CACAF,eAACG,IAAMU,OAAM,CAAAX,SAAA,CACXY,cAAA,OACEC,IAAI,2BACJd,UAAU,eACVe,IAAI,KAENF,cAAA,UAAQb,UAAU,UAASC,SAAEzB,EAAaH,QAC1CwC,cAAA,SAAAZ,SAAO,gBAETY,cAACX,IAAMc,KAAI,CAAAf,SAAEzB,EAAaF,UAE9ByB,eAAA,UAAQC,UAAU,aAAYC,SAAA,CAC3BjB,GAAgB6B,cAAA,MAAAZ,SAAI,gEACnBjB,GAAgB6B,cAAA,MAAAZ,SAAI,gDAMtBY,cAAA,SAEEjC,EAGEiC,cAACI,kBAAe,CAACC,KAAMtC,EAAMqB,SAC3BY,cAAA,UAAAZ,SAAQ,wBAGV,UAKZ,ECvDekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,SAAAkC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACPhB,cAACiB,IAAMC,WAAU,CAAA9B,SACfY,cAAChD,EAAG,MAENmE,SAASC,eAAe,SAI1Bd,G","file":"static/js/main.e2ef37ac.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAIATwBCnYxsSuwoD4RAqkQV3lntJnZejg\",\n  authDomain: \"test-7b66f.firebaseapp.com\",\n  projectId: \"test-7b66f\",\n  storageBucket: \"test-7b66f.appspot.com\",\n  messagingSenderId: \"1005462636402\",\n  appId: \"1:1005462636402:web:c64564c20b9b0b1ac83feb\",\n  measurementId: \"G-N47WBVYKYG\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst messaging = getMessaging(firebaseApp);\n\nexport const fetchToken = (setTokenFound, setToken) => {\n  return getToken(messaging, {vapidKey: 'BG3zz9ZcBcNmulZjGJQlS8RtBxWH-BViMkSDM2-RTzbMR_21_RYVGIvrX7LtZ0RlH27a-B098j12iIf0BTLnlrE'}).then((currentToken) => {\n    if (currentToken) {\n      console.log('current token for client: ', currentToken);\n      setTokenFound(true);\n      setToken(currentToken);\n      // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n    } else {\n      console.log('No registration token available. Request permission to generate one.');\n      setTokenFound(false);\n      // shows on the UI that permission is required\n    }\n  }).catch((err) => {\n    console.log('An error occurred while retrieving token. ', err);\n    // catch error while creating client token\n  });\n}\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    onMessage(messaging, (payload) => {\n      resolve(payload);\n    });\n});\n","import './App.css';\nimport {useState} from 'react';\nimport { fetchToken, onMessageListener } from './firebase';\nimport {Button, Toast} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n\nfunction App() {\n\n  const [show, setShow] = useState(false);\n  const [notification, setNotification] = useState({title: '', body: ''});\n  const [token, setToken] = useState(null);\n  const [isTokenFound, setTokenFound] = useState(false);\n  fetchToken(setTokenFound, setToken);\n\n  onMessageListener().then(payload => {\n    setNotification({title: payload.notification.title, body: payload.notification.body})\n    setShow(true);\n    console.log(payload);\n  }).catch(err => console.log('failed: ', err));\n\n  const onShowNotificationClicked = () => {\n    setNotification({title: \"Notification\", body: \"This is a test notification\"})\n    setShow(true);\n  }\n\n  return (\n    <div className=\"App\">\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide animation style={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          minWidth: 200\n        }}>\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">{notification.title}</strong>\n            <small>just now</small>\n          </Toast.Header>\n          <Toast.Body>{notification.body}</Toast.Body>\n        </Toast>\n      <header className=\"App-header\">\n        {isTokenFound && <h1> Notification permission enabled üëçüèª </h1>}\n        {!isTokenFound && <h1> Need notification permission ‚ùóÔ∏è </h1>}\n\n        {/*\n          <Button onClick={() => onShowNotificationClicked()}>Show Toast</Button>\n        */}\n\n        <br/>\n        {\n          token\n          ?\n          (\n            <CopyToClipboard text={token}>\n              <button>Copy my FCM token</button>\n            </CopyToClipboard>\n          )\n          : null\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\nreportWebVitals();\n"],"sourceRoot":""}